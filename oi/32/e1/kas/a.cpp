#include "kaslib.h"
#include <bits/stdc++.h>
#include <cassert>
#include <cmath>
#include <csignal>
#include <cstdio>
#include <cstdlib>
#include <cstring>
using namespace std;

#define N 1'000'000'000'000'000'000ll
typedef long long ll;

constexpr int estimatePrimeCount(const int n) { return n / log(n); }

constexpr ll sieveSize = 70000; //(ll)500 * 1024 * 1024 / 5;
bool sieve[sieveSize];
vector<int> primes;
int spf[sieveSize];

void setupSieve() {
  memset(sieve, true, sieveSize * sizeof(sieve[0]));
  sieve[0] = sieve[1] = false;

  primes.reserve(estimatePrimeCount(sieveSize) * 1.1);

  for (ll i = 2; i < sieveSize - 1; i++) {
    if (sieve[i]) {
      primes.push_back(i);
      spf[i] = i;
    }

    for (ll j = 0; j < (int)primes.size() && i * primes[j] < sieveSize - 1 &&
                   primes[j] <= spf[i];
         j++) {
      sieve[i * primes[j]] = false;
      spf[i * primes[j]] = primes[j];
    }
  }
}

const inline bool doesMulOverflow(ll a, ll b, ll c) { return a > c / b; }

struct Factor {
  int num;
  int count;
  bool locked;
  ll mulNum;
  ll attemptMulNum;
  int attemptCount;
};

const ll scoreArr[] = {
    0,
    35,
    228,
    689,
    1469,
    2590,
    4185,
    6344,
    9656,
    14883,
    23832,
    38400,
    61149,
    93269,
    137992,
    187530,
    240709,
    298004,
    366165,
    439928,
    507584,
    574452,
    654390,
    727395,
    801076,
    883883,
    946390,
    1029105,
    1093666,
    1152534,
    1231568,
    1327145,
    1405498,
    1493752,
    1613237,
    1714502,
    1818605,
    1929448,
    2058513,
    2180864,
    2322899,
    2470177,
    2711703,
    2888148,
    3136510,
    3416218,
    3717608,
    4073811,
    4584756,
    5136456,
    6065768,
    7081179,
    8881320,
    12601312,
    21735002,
    43207305,
    76918296,
    115376434,
    155756904,
    192787220,
    227462373,
    261554464,
    301911823,
    349442112,
    394477195,
    432895991,
    487001460,
    527686336,
    567800516,
    611026350,
    652422676,
    699381811,
    735712005,
    771515199,
    812288664,
    838348472,
    878825829,
    914305908,
    948650964,
    980890658,
    1013477104,
    1041613657,
    1080712496,
    1115201245,
    1152381216,
    1184000478,
    1219214829,
    1248551920,
    1277821454,
    1305858330,
    1331808256,
    1362117293,
    1401802881,
    1425719846,
    1466297217,
    1494251658,
    1521248125,
    1576156397,
    1613290152,
    1646588952,
    1672019500,
    1699911432,
    1728049554,
    1749998084,
    1773326715,
    1801492158,
    1824046080,
    1842808675,
    1866577691,
    1892823456,
    1918614628,
    1945721352,
    1964616078,
    1983733024,
    2003303752,
    2023107695,
    2046479600,
    2067372957,
    2106269313,
    2139273340,
    2169327078,
    2201267201,
    2216696283,
    2249552319,
    2264461290,
    2293722956,
    2323303322,
    2363662796,
    2384441390,
    2412443544,
    2441359678,
    2472955120,
    2495901568,
    2526356135,
    2542565358,
    2569677420,
    2601134886,
    2629552526,
    2659212720,
    2678860856,
    2709232382,
    2735619453,
    2779636224,
    2807398714,
    2842656852,
    2866880720,
    2890661275,
    2919171242,
    2936749896,
    2980875025,
    3011321104,
    3030129234,
    3058641039,
    3088806114,
    3105992247,
    3142440576,
    3173364829,
    3213347700,
    3250069362,
    3281363586,
    3314046255,
    3360086720,
    3398043522,
    3439706585,
    3490162123,
    3544195028,
    3580695572,
    3628729886,
    3670461378,
    3716859186,
    3758927560,
    3818413678,
    3845540428,
    3896913750,
    3953213135,
    4005075536,
    4042479969,
    4089093068,
    4154915000,
    4222218786,
    4259998163,
    4325410239,
    4425617706,
    4559956830,
    4683887559,
    4798980524,
    4891758353,
    5003116601,
    5140176160,
    5205241252,
    5293400203,
    5458342649,
    5589337095,
    5770705772,
    5924442244,
    6073604208,
    6260509272,
    6484944993,
    6690438685,
    7006594836,
    7369061636,
    7797360442,
    8240337300,
    8785479598,
    9340550592,
    10494865980,
    13302399186,
    39510259588,
    114127767846,
    182664307832,
    258704039440,
    320724677602,
    429707376867,
    515489092470,
    628433512074,
    699188605993,
    793443418850,
    887122743186,
    963851142122,
    1095186403731,
    1222055568129,
    1316237680431,
    1442123331271,
    1596556427927,
    1689780171856,
    1801493142136,
    1867781269515,
    1942354978830,
    2019476528346,
    2129744693976,
    2245519641540,
    2311501743984,
    2450080363968,
    2538716380854,
    2610396631040,
    2724220999240,
    2841952079864,
    2928758761320,
    3058199416705,
    3150793645821,
    3278822333124,
    3379437698296,
    3484729475028,
    3578592045977,
    3638188189407,
    3752012083980,
    3875447315381,
    3988286523546,
    4133788850408,
    4323402131445,
    4483699027201,
    4556124526932,
    4674158093707,
    4737772307934,
    4811150990934,
    4886189340647,
    4988682899504,
    5129586075273,
    5254379819063,
    5409479908144,
    5517855019963,
    5617457122987,
    5786421894875,
    5949234075988,
    6052558285181,
    6147609345176,
    6239806882650,
    6326336618789,
    6409646307267,
    6504933941646,
    6582792250180,
    6687458969988,
    6802243521314,
    6900507508425,
    6997091603586,
    7115928440538,
    7226862223104,
    7323247035292,
    7431635748362,
    7550190589040,
    7630591473444,
    7824649325050,
    7867923888760,
    7947104011433,
    8035877066421,
    8177993263114,
    8250499610952,
    8366617237376,
    8454838149204,
    8556908199515,
    8644061746593,
    8747862857930,
    8854358543405,
    8939080928164,
    9062998304664,
    9114995080352,
    9219586976397,
    9276097036245,
    9371961575834,
    9498649928597,
    9658408935161,
    9724290369888,
    9848868810063,
    9972449005136,
    10088167862190,
    10133822502063,
    10218793710396,
    10330568559162,
    10489582313017,
    10570968878121,
    10633778259090,
    10746098326492,
    10867744992800,
    10976363970128,
    11055719613620,
    11162576412141,
    11260975903131,
    11336328466302,
    11408191775604,
    11477477281437,
    11558426638030,
    11641427190250,
    11764893760017,
    11804711792328,
    11884633539625,
    11957055705153,
    12090796292358,
    12185082428200,
    12328019108350,
    12390961750025,
    12478498925282,
    12517833828449,
    12574780271235,
    12690586738664,
    12759270945394,
    12867210091632,
    12924885240462,
    12995253368799,
    13054360073832,
    13126028872283,
    13269122938973,
    13368324394140,
    13471680250176,
    13543779950835,
    13638399858167,
    13730928763894,
    13816164919500,
    13866386889740,
    13936053694598,
    14000751722756,
    14069701579214,
    14145565891713,
    14195066641875,
    14278443217434,
    14325562011088,
    14374562777291,
    14454123949138,
    14526400716726,
    14580115995066,
    14707416453597,
    14812355088037,
    14883089833213,
    14949785616563,
    15076544248220,
    15171957138582,
    15224103386100,
    15330635566740,
    15457177747739,
    15582340288144,
    15663182684914,
    15773382287872,
    15808426911785,
    15883958498409,
    15942552590510,
    16034229176873,
    16110587856880,
    16206065984092,
    16267613036256,
    16324611585750,
    16369830870428,
    16448163556410,
    16539919757010,
    16642150440864,
    16718073122066,
    16789671930353,
    16845846069852,
    16951480335543,
    17015419222938,
    17087308877185,
    17212609104841,
    17291331860081,
    17318053629205,
    17422830152416,
    17550374684658,
    17667975629878,
    17732721789952,
    17837998669106,
    17972776283395,
    18104069599044,
    18203743723305,
    18266133936097,
    18345151858308,
    18548644147875,
    18615037588914,
    18698027039666,
    18756334561470,
    18882158238939,
    18937214413584,
    18992593764249,
    19144273735550,
    19324631040829,
    19390185356696,
    19516391261901,
    19589264342098,
    19621407218790,
    19719974583666,
    19820435666744,
    19944114853160,
    20030803983661,
    20069586764010,
    20151004014900,
    20221223801634,
    20358924323633,
    20464327395743,
    20538576920846,
    20577725567149,
    20709809731421,
    20785472231579,
    20841668985185,
    20910139904419,
    20982119754561,
    21059148640963,
    21139059222218,
    21189561424325,
    21330446631996,
    21433489700864,
    21492475199404,
    21610305874831,
    21751808262746,
    21817639348960,
    21836733675710,
    21936664199141,
    21993953436252,
    22022380251189,
    22156202473251,
    22258041645090,
    22337985577341,
    22445214078920,
    22503071129286,
    22603515844749,
    22727052873716,
    22841257053788,
    22952203932757,
    22978295827633,
    23103253772007,
    23173423432263,
    23219747392512,
    23280828483975,
    23349896944634,
    23449075522152,
    23553561758069,
    23653482466180,
    23717913513237,
    23825254141789,
    23891788107239,
    23950550985786,
    24063594002244,
    24100034906093,
    24162172024868,
    24290952393232,
    24351263924640,
    24486532976349,
    24572269718878,
    24651889680770,
    24774993886643,
    24883696967299,
    25005586037484,
    25090391759125,
    25235086660861,
    25346786623198,
    25418706268088,
    25532659716723,
    25655833069551,
    25728035558526,
    25814659749685,
    25945017114434,
    25999954366533,
    26063303692900,
    26168647664312,
    26289260478208,
    26378531293464,
    26476771888067,
    26519821761227,
    26607554199421,
    26734249789408,
    26803606579722,
    26870445880299,
    26931179214528,
    26977507278198,
    27108609831321,
    27223027403023,
    27307514382213,
    27429454241163,
    27526888320723,
    27592142874678,
    27679954030560,
    27797216322357,
    27975467919168,
    28076871562065,
    28182376392940,
    28300536929025,
    28374898309979,
    28447495530102,
    28513762842014,
    28617023437407,
    28770554779139,
    28953249158967,
    28990407632319,
    29097315134773,
    29164434109881,
    29248157561205,
    29413552567575,
    29507468126724,
    29654823208339,
    29727453849849,
    29808787587138,
    29936742848358,
    30033070679492,
    30083113435408,
    30273754020796,
    30444462440667,
    30625919753595,
    30733397300023,
    30905219081938,
    31052152431828,
    31213454511286,
    31362212360664,
    31469660477502,
    31596028617916,
    31727209242150,
    31889366571396,
    31982340679318,
    32049425243273,
    32134271961438,
    32314289353745,
    32498606697861,
    32639006636082,
    32860797034824,
    33114620736342,
    33289769869538,
    33446299096790,
    33561201166157,
    33848913427830,
    34155143299072,
    34332856295703,
    34579089453684,
    34745858792445,
    35194388445643,
    35365526191328,
    35564600379392,
    35771154430664,
    36109121917813,
    36521525864915,
    36931100735040,
    37164516785720,
    37543118135222,
    37784720929640,
    38254001359468,
    38770203384685,
    39097536097094,
    39585268369083,
    39845087020824,
    40746016505128,
    41196681920625,
    42152691419539,
    43930038348500,
    182166098499062,
    372648829174740,
    904492838302053,
    1370060407531883,
    1892406522450326,
    2704253393336200,
    3128698976327610,
    3744671609325425,
    4300389839836480,
    4666969230306838,
    5554130983453692,
    6696566513906769,
    7332134310889480,
    8130089614294067,
    8841272064515930,
    9650425596809016,
    10207046136688019,
    10721406426513888,
    11477352053668074,
    12245208291087905,
    13234625902937677,
    14512789997221516,
    15473702352601794,
    16412262438949658,
    17073484292003062,
    17916916592276724,
    19095666829526777,
    19655802802927785,
    20290919620345045,
    20921700211431740,
    21800414909878971,
    22211107413475704,
    23313712588996700,
    24137212608755946,
    25030054184084839,
    25998923285030080,
    27019499619412707,
    27638675289472353,
    28225893181874722,
    29273623509713862,
    30266583621348494,
    31454634907628822,
    32777400416139645,
    33593074074462875,
    34152958628696906,
    35038749427624014,
    35730471514721820,
    36898898555857349,
    37669259165369057,
    38897703054262624,
    39480299713146084,
    40380396674769910,
    41115800204628302,
    42415383068809617,
    43222610120289973,
    44091133230128195,
    45100069993864674,
    46334821054971673,
    46812780446937810,
    47512709526304621,
    47873670145278842,
    48331864474905711,
    49503588999781554,
    50289293740129041,
    51193384536094765,
    52409978433536409,
    52964459075949044,
    53577612700622551,
    54124465728385150,
    55009020145793157,
    55806336811543879,
    56589356207581720,
    57591083352197077,
    58775484019617500,
    59421401171693984,
    60978216613077651,
    62786721450384308,
    63771968936416323,
    64656047957284138,
    65761446532104570,
    66611779726733159,
    67508745601959501,
    68449823986637819,
    69566566692313872,
    70377593752240560,
    71640104012944788,
    72373497131263367,
    73803993814699044,
    74514402719664470,
    75250711981460920,
    76148699147470868,
    76839666598418623,
    77673644078122285,
    78849401270620474,
    79588507325731375,
    81382104113071328,
    82855228449049824,
    83998084370339360,
    84928337315083254,
    85758864928242177,
    86906213666410306,
    87745052591509786,
    87982062763926100,
    88932812470470750,
    90215324632250783,
    90712190894941612,
    91555297528455477,
    91946084539646220,
    93389659122535308,
    94785941453090692,
    95871259636608204,
    96849742637007074,
    97375723134699245,
    97843622199556680,
    98468240331746560,
    100069894562793075,
    100703881167660720,
    101957543217662771,
    102897105960367224,
    104249194909445347,
    105089863794021902,
    106267766800589393,
    106866780926442485,
    107644222483055696,
    108259657182457668,
    109099101149994846,
    110248901812738912,
    111384950107964181,
    112205778260708067,
    113038761266657952,
    113711015511785936,
    114933253114012172,
    116216318851408152,
    116817172409126904,
    117768774385489511,
    119119416731397818,
    119757207440028872,
    120803460344413920,
    121855574295835955,
    122789168806796825,
    123674262047550541,
    124541320164055175,
    125868704951967537,
    126592115963987696,
    127769736866234238,
    128413537015745188,
    129403436269435622,
    130468870402164845,
    131046230756698474,
    131888916272505062,
    132587487453301816,
    133114462298260993,
    133528159160849118,
    134466862486818895,
    135586433051075718,
    136417484986272920,
    137087971699715392,
    137888202685620030,
    138433970260716633,
    139018128169810567,
    140026244036091005,
    141718670657585454,
    142346381484473895,
    143405915062988160,
    145165558955086368,
    146070243324539936,
    146767069832293208,
    147284960318210419,
    148101454284324572,
    148920812906238060,
    149993517202784216,
    150826235278598750,
    151710513852503482,
    152554521027885310,
    153306876301014480,
    154390894644330561,
    156321364606778180,
    157158246631526312,
    158110660544205288,
    158925617149431024,
    159245067379498400,
    159900552039354431,
    161413025523266816,
    162504978438561892,
    163036507649369291,
    164530583650575251,
    165457812339965239,
    166061414885638470,
    167121917572936239,
    167621475551757804,
    168568014286903168,
    169320372303927079,
    170075627141722810,
    170724983363414175,
    171776356837982904,
    172477247689988471,
    173639992074260065,
    174686673058308576,
    175576461919593336,
    176392425967000479,
    177217563021618649,
    178410772410649324,
    179210434549775551,
    180053561278515368,
    180680311871769727,
    180954275776738041,
    181653895350293405,
    182581186639305475,
    183429845353192570,
    183930802040657772,
    184246182082139388,
    184930067341411943,
    185640687257177712,
    187160030860979972,
    187699999456510505,
    188741439316684776,
    189291186718944994,
    190156284475577735,
    190449883311511973,
    192192936995157672,
    193277090222684520,
    193803773749498371,
    194855669566582470,
    195576651106890625,
    196269163757115229,
    196974343410562933,
    197784408214074346,
    198393512218208288,
    199067269109514151,
    199420425371034271,
    199981869880231296,
    200534545504335908,
    201430002083895136,
    202202173820453571,
    203318925033765475,
    204291313897192214,
    205145062450130979,
    206092334082865088,
    206680908122047426,
    207434842068659711,
    208036880201656533,
    208468575175667202,
    208771964944826249,
    208844664390165324,
    209341753880220243,
    209754361122375911,
    210328404343248933,
    210936826622693754,
    211151308189655008,
    211551565596287889,
    211909926769210025,
    212834144686005508,
    213642825844848064,
    214473114649435995,
    214828193702893276,
    215296092002706724,
    215718246555934745,
    215930615403632257,
    216331692928355043,
    217376050923563379,
    217840893113145775,
    218664657317070231,
    219098991653474241,
    219352911504094220,
    220218096869930050,
    221020927944967722,
    221457945342149733,
    222019183505447307,
    222811719306668104,
    223219900016827308,
    223652857701277861,
    223841586588390952,
    224383460054230666,
    224814510700272315,
    225473104383220276,
    226149806502237741,
    226836364335178624,
    227269009846899969,
    228272941511885361,
    228778170106267834,
    229532883353720106,
    229763598684905568,
    230127627171516546,
    230523761207715644,
    231781065511866753,
    231959980471916844,
    233335678870259056,
    233803969159942134,
    234009039263063506,
    234508430302824626,
    234739579584100890,
    235704708210190476,
    236453108896277416,
    236814972153806800,
    237590377979214378,
    237972977516131571,
    238569985567417570,
    239087026771672875,
    239754231988264469,
    240482442540523188,
    240980164052161793,
    241280696679225823,
    242361525927663919,
    243149737568405672,
    243707414580224409,
    244315663043922212,
    244769912561235840,
    245568180887114715,
    246161352791005953,
    246738805454715231,
    247543156370410026,
    247796258688582889,
    248588638604820878,
    248961059979020820,
    249743449521568422,
    250156911630161524,
    250615076296744554,
    251569772752669431,
    252381762215731476,
    252455933218020798,
    252917443592209474,
    252995233044629246,
    253417585054490976,
    253949219155844635,
    254381836775738608,
    254680377561199972,
    255050503943355970,
    255721536026819855,
    256260425220717946,
    256749111772227180,
    257128488866520180,
    257546486076540204,
    258050727894814679,
    258721496739780462,
    259589633807559393,
    260523703205865998,
    260981217021031218,
    261441587829111180,
    261811853955089780,
    262175456760437600,
    262536315234554278,
    262700297205554211,
    263321159314047340,
    263958746690283075,
    264835160313813486,
    265417556739839146,
    265849602268461396,
    266348689105901466,
    267047974598974932,
    267896716507618623,
    268188870457527837,
    268568093405975940,
    269360456362271604,
    269767062945473379,
    270025085181800689,
    270245883791412340,
    270489539266448025,
    270877954785265009,
    271303204701713430,
    271983600598037120,
    272413834148467790,
    273092714304230293,
    273352687222345125,
    273955613596968780,
    274279244962448721,
    274507345331062410,
    274839463738368086,
    275417342212674195,
    275743607670607428,
    276228299526577524,
    276857381197536160,
    276986534716366286,
    277662975193596240,
    279001924345348165,
    279618629313826797,
    280138721407655431,
    280438145914570500,
    280917752431718088,
    281456834007807850,
    281945792884107766,
    282510575717740205,
    282943545407276117,
    283407347344593951,
    283752442231023016,
    284146533194232280,
    284436717233311061,
    285015734784899896,
    285708461189523064,
    286176468199046333,
    286419170623836922,
    287072793321730885,
    287273908220986164,
    287547313529139684,
    287914922822417040,
    288209303363530971,
    288775441640072492,
    289443462487619022,
    289765691274713857,
    289935261796698922,
    290219858614711750,
    290628430406272103,
    291018605572230965,
    291690997437322080,
    292508095383505311,
    292923907802991912,
    293331412810029346,
    293704503254813430,
    293883807031736679,
    294418394589465663,
    295061771514016640,
    295292389854198875,
    296272665854090877,
    296876380514100637,
    297498765125830435,
    298066575035277999,
    298640066516131782,
    299010462619321082,
    299393778021062952,
    299597385645706478,
    299871762245773824,
    300241050036201312,
    300523102123634091,
    300954941448761424,
    301451262631662466,
};

int solve(ll primeCountAllowed) {
  int totalBajtalarsEaten = 0;
  int wins = 0;

  int maxPrimeI = 0;
  int maxBajtalarCost = 0;

  while (true) {
    vector<Factor> factors;
    ll num = 1;
    int primeI = 0;
    bool stopSearchingForNew = false;
    int bajtalarsEaten = 0;

    // vector<pair<ll, ll>> history;
    while (true) {
      vector<Factor *> attemptBatch;
      vector<Factor> newBatch;
      ll batchMul = 1;

      ll estimatedMinScore = scoreArr[bajtalarsEaten];
      if (num <= estimatedMinScore) {
        // printf("returning early, estimatedMinScore: %lld, bajtalarsEaten
        // %d\n", estimatedMinScore, bajtalarsEaten);
        Szturchnij();
        totalBajtalarsEaten++;
        break;
      }

      /* not perfect, it would fail for 2^58 for example */
      for (int i = 0; i < (int)factors.size(); i++) {
        Factor *factor = &factors[i];
        if (factor->locked)
          continue;

        if (doesMulOverflow(factor->mulNum, factor->num, N) ||
            doesMulOverflow(factor->num, num, N)) {
          factor->locked = true;
          continue;
        }
        factor->attemptMulNum = factor->mulNum * factor->num;

        if (doesMulOverflow(batchMul, factor->attemptMulNum, N)) {
          continue;
        }
        factor->attemptCount++;
        batchMul *= factor->attemptMulNum;

        attemptBatch.push_back(factor);
      }

      if (!stopSearchingForNew) {
        while (true) {
          int prime = primes[primeI];
          if (doesMulOverflow(num, prime, N)) {
            stopSearchingForNew = true;
            break;
          }
          if (doesMulOverflow(batchMul, prime, N))
            break;
          batchMul *= prime;
          newBatch.push_back({prime, 0, false, 1, prime, 1});

          primeI++;

          if (maxPrimeI < primeI) {
            maxPrimeI = primeI;
            // printf("max primeI: %d\n", maxPrimeI);
          }

          if (primeI >= primeCountAllowed) {
            stopSearchingForNew = true;
            break;
          }
        }
      }
      /* can perhaps reattempt attemptBatch, about 370 requests are unoptimal */

      if (batchMul == 1) {
        if (primeI < primeCountAllowed) {
          // if (totalBajtalarsEaten + 1 >= 10'000'000)
          //   return wins;

          Odpowiedz(num);
          if (bajtalarsEaten > maxBajtalarCost) {
            // printf("bajtalarsEaten: %d\n", bajtalarsEaten);
            maxBajtalarCost = bajtalarsEaten;
          }
          wins++;
          totalBajtalarsEaten++;

          // printf("(True, [");
          // for (int i = 0; i < history.size(); i++) {
          //   auto a = history[i];
          //   printf("(%lld, %lld), ", a.first, a.second);
          // }
          // printf("(%d, %lld)", bajtalarsEaten, num);
          // cout << "])," << endl;
          // printf("FOUND! %lld, bajtalars eaten: %d\n", num,
          // bajtalarsEaten);
        } else {
          // if (totalBajtalarsEaten + 1 >= 10'000'000)
          //   return wins;

          Szturchnij();
          totalBajtalarsEaten++;

          // printf("(False, [");
          // for (int i = 0; i < history.size(); i++) {
          //   auto a = history[i];
          //   printf("(%lld, %lld), ", a.first, a.second);
          // }
          // printf("(%d, %lld)", bajtalarsEaten, num);
          // cout << "])," << endl;

          // printf("anwser not found! %lld, bajtalars eaten: %d, X was:
          // %lld\n",
          //        num, bajtalarsEaten, GetX());
        }
        break;
      }

      // if (totalBajtalarsEaten + 1 >= 10'000'000)
      //   return wins;
      ll res = Pytaj(batchMul);

      bajtalarsEaten++;
      totalBajtalarsEaten++;

      bool changed = false;
      for (int i = 0; i < (int)attemptBatch.size(); i++) {
        Factor *factor = attemptBatch[i];
        if (res % factor->attemptMulNum == 0) {
          ll div = factor->attemptMulNum / factor->mulNum;
          num *= div;
          changed = true;

          factor->count = factor->attemptCount;
          factor->mulNum = factor->attemptMulNum;

        } else {
          factor->locked = true;
          changed = true;
        }
      }
      for (int i = 0; i < (int)newBatch.size(); i++) {
        Factor factor = newBatch[i];

        if (res % factor.attemptMulNum == 0) {
          assert(factor.attemptMulNum == factor.num);
          assert(factor.attemptCount == 1);
          num *= factor.num;
          changed = true;

          factor.count = factor.attemptCount;
          factor.mulNum = factor.attemptMulNum;

          factors.push_back(factor);
        }
      }
      if (changed) {
        // history.push_back({bajtalarsEaten, num});
        // printf("eaten: %d, num: %lld", bajtalarsEaten, num);

        // printf("\n");
        // for (int i = 0; i < factors.size(); i++) {
        //   Factor a = factors[i];
        //   printf("factor num: %d, count: %d, locked: %b, mulNum: %lld, "
        //          "attemptMulNum: "
        //          "%lld\n",
        //          a.num, a.count, a.locked, a.mulNum, a.attemptMulNum);
        // }
      }
    }
  }
  return -1;
}

int main(int argc, char *argv[]) {
  setupSieve();

  DajN();
  int res = solve(primes.size());
  cout << res << endl;

  return 0;
}
